import sys
import os
import json
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from functions.armado import seleccionJugadoresEquipo, creadorEquipos
from functions.archivos import manejoJson
from functions.archivos.exportarEstadisticas import exportarStats
from functions.jugadores import jugadores as j
from functions.ratings import top5
from functions.partido.cargarEstadisticas import cargarEstadisticas
from functions.partido.guardarRegistros import guardarRegistro
from functions.partido.actualizarEstadisticas import actualizar_estadisticas


def menuCrearPartido():
    """
    Muestra un submen√∫ con opciones relacionadas a la creaci√≥n de un nuevo partido.

    Opciones:
        1 - Crear Partido: inicia el proceso de armado de equipos.
        2 - Volver: retorna al men√∫ principal.

    Notas:
        - Valida la entrada del usuario para evitar opciones incorrectas.
        - Llama a la funci√≥n 'crearPartido()' si se selecciona la opci√≥n 1.
    """
    print()
    print()
    print()
    print()
    print("¬øQue acci√≥n quiere realizar?") 
    print("1. Crear Partido")
    print("2. Volver al men√∫ principal")
    

    n = int(input("Ingresar acci√≥n: "))
    while n != 1 and n != 2:
        print("Ingresar una acci√≥n v√°lida.")
        n = int(input("Ingresar acci√≥n: "))
    if n == 1:
        crearPartido()
    elif n == 2:
        main()


    
def crearPartido():
    """
    Inicia el proceso de armado de un partido con equipos equilibrados.

    Flujo:
        1. Solicita cu√°ntos jugadores por equipo (entre 5 y 11).
        2. Valida que haya suficientes jugadores en la base de datos.
        3. Permite seleccionar manualmente a los jugadores que participar√°n.
        4. Usa el algoritmo de 'creadorEquipos' para generar los equipos equilibrados.
        5. Muestra por pantalla los equipos y el promedio de cada uno.

    Notas:
        - Se asegura de que se ingresen solo valores v√°lidos.
        - La cantidad total de jugadores seleccionados ser√° el doble del valor ingresado.
    """

    if os.path.exists("registroPartido.json"):
        os.remove("registroPartido.json")

    print("\n=== CREAR PARTIDO ===")
    print("¬øCu√°ntos jugadores por equipo? (5 a 11)")
    
    while True:
        try:
            num = int(input("Ingresar cantidad: "))
            if 5 <= num <= 11:
                break
            else:
                print("‚ùå Debe estar entre 5 y 11.")
        except ValueError:
            print("‚ùå Ingres√° un n√∫mero v√°lido.")

    total_jugadores = len(manejoJson.cargar_jugadores())

    while total_jugadores < num * 2:
        print(f"‚ö†Ô∏è No hay suficientes jugadores para 2 equipos de {num}. (Total disponibles: {total_jugadores})")
        try:
            num = int(input("Eleg√≠ un n√∫mero menor de jugadores por equipo: "))
            if num < 5 or num > 11:
                print("‚ùå N√∫mero fuera de rango (5-11).")
        except ValueError:
            print("‚ùå Ingres√° un n√∫mero v√°lido.")

    jugadoresPartido = seleccionJugadoresEquipo.agregar_jugador_a_partido(num * 2)
    equipo1, equipo2, puntaje1, puntaje2 = creadorEquipos.creadorEquipos(jugadoresPartido)

    print("\n" + "=" * 40)
    print(f"{'Equipos de F√∫tbol':^40}")
    print("=" * 40)
    print(f"{'Equipo 1':<20} {'Equipo 2':<20}")
    print("-" * 40)

    for j1, j2 in zip(equipo1, equipo2):
        print(f"{j1:<20} {j2:<20}")

    print("-" * 40)
    print(f"{'Promedio Equipo 1:':<20} {puntaje1:<20.1f}")
    print(f"{'Promedio Equipo 2:':<20} {puntaje2:<20.1f}")
    print("=" * 40)

    guardarRegistro(jugadoresPartido,equipo1, equipo2)

    print("")
    n = int(input("Presione 1 para finalizar el partido: "))

    if n == 1:
        print("\nIngrese el resultado final del partido")
        try:
            goles1 = int(input("Goles del Equipo 1: "))
            goles2 = int(input("Goles del Equipo 2: "))
        except ValueError:
            print("‚ùå Entrada inv√°lida. Se asignan 0 por defecto.")
            goles1, goles2 = 0, 0

        RUTA_REGISTRO = os.path.join(os.path.dirname(__file__), "../src/json/registroPartido.json")

        with open(RUTA_REGISTRO, "r", encoding="utf-8") as f:
            data = json.load(f)

        if goles1 == goles2:
            print("ü§ù Empate: se registra empate para todos los jugadores.")

            for jugador in data["jugadores"]:
                jugador["empatados"] += 1

        else:
            equipo_ganador = equipo1 if goles1 > goles2 else equipo2
            equipo_perdedor = equipo2 if goles1 > goles2 else equipo1

            for jugador in data["jugadores"]:
                nombre_completo = f"{jugador['nombre']} {jugador['apellido']}"
                if nombre_completo in equipo_ganador:
                    jugador["ganados"] += 1
                elif nombre_completo in equipo_perdedor:
                    jugador["perdidos"] += 1

            print("‚úÖ Resultado registrado correctamente.")

        with open(RUTA_REGISTRO, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)


        error = True
        while error:
            error = cargarEstadisticas(goles1, goles2)
            if error:
                print("Intente nuevamente.")

        actualizar_estadisticas()
        print("‚úÖ Estad√≠sticas actualizadas correctamente.")
        print("‚úÖ Registro guardado correctamente.")

        main()
        


def menuJugadores():
    """
    Muestra un submen√∫ para gestionar jugadores.

    Opciones:
        1 - Mostrar lista de jugadores.
        2 - Dar de alta un nuevo jugador.
        3 - Editar los datos de un jugador existente.
        4 - Eliminar un jugador de la base de datos.
        5 - Volver al men√∫ principal.

    Notas:
        - Llama a funciones del m√≥dulo 'jugadores' para cada acci√≥n.
        - Valida la opci√≥n seleccionada antes de continuar.
    """
    print()
    print()
    print("¬øQue acci√≥n quiere realizar?") 
    print("1. Mostrar lista de jugadores")
    print("2. Alta de jugador")
    print("3. Editar jugador")
    print("4. Baja de jugador")
    print("5. Volver al men√∫ principal")

    n = int(input("Ingresar acci√≥n: "))
    while n < 0 or n > 5: 
        print("Ingresar una acci√≥n v√°lida.")
        n = int(input("Ingresar acci√≥n: "))

    

    if n == 1:
        j.mostrar_lista()
        menuJugadores()
    elif n == 2:
        j.altaJugador()
        menuJugadores()
    elif n == 3:
        j.editarJugador()
        menuJugadores()
    elif n == 4:
        j.bajaJugador()
        menuJugadores()
    elif n == 5:
        main()
        

def main():
    """
    Funci√≥n principal que lanza el men√∫ inicial de la aplicaci√≥n.

    Opciones:
        1 - Crear Partido.
        2 - Administraci√≥n de jugadores.
        3 - Ver estad√≠sticas.
        4 - Salir del programa.

    Notas:
        - Es la primera funci√≥n que se ejecuta.
        - Controla la navegaci√≥n hacia los dem√°s submen√∫s.
        - La validaci√≥n de opciones tiene un error l√≥gico en la condici√≥n del while (deber√≠a ser `while n < 1 or n > 4`).
    """
    print()
    print()
    print()
    print()
    print()
    print()
    print()
    print("------Bienvenido a la aplicaci√≥n de TeamBuilder------")
    print("¬øQue acci√≥n quiere realizar?")
    print("1. Crear Partido")
    print("2. Administraci√≥n de jugadores")
    print("3. Estad√≠sticas")                   
    print("4. Salir")
    

    n = int(input("Ingresar acci√≥n: "))
    while n < 0 or n > 3:
        print("Ingresar una acci√≥n v√°lida.")
        n = int(input("Ingresar acci√≥n: "))

    if n == 1:
        menuCrearPartido()
    elif n == 2:
        menuJugadores()
    elif n == 3:            
        menuEstadisticas()
    else:
        print("¬°Hasta pronto!")

def menuEstadisticas():
    """
    Muestra un submen√∫ para consultar diferentes estad√≠sticas de jugadores.

    Opciones:
        1 - Top 5 goleadores.
        2 - Top 5 asistidores.
        3 - Top 5 m√°s activos.
        4 - Top 5 con mejor promedio.
        5 - Top 5 con peor promedio.
        6 - Volver al men√∫ principal.

    Notas:
        - Cada opci√≥n muestra un ranking generado por funciones del m√≥dulo 'top5'.
        - Despu√©s de mostrar el ranking, solicita al usuario que presione 1 para volver.
    """

    print("¬øDe qu√© quiere ver estad√≠sticas?")
    print("1. Top 5 goleadores")
    print("2. Top 5 asistidores") 
    print("3. Top 5 m√°s activos")
    print("4. Top 5 mas ganadores")
    print("5. Top 5 mas perdedores")
    print("6. Descargar estad√≠sticas")
    print("7. Volver atras")

    n = int(input("Ingresar acci√≥n: "))
    while n < 0 or n > 7: 
        print("Ingresar una acci√≥n v√°lida.")
        n = int(input("Ingresar acci√≥n: "))

    if   n == 1:
        top5.goleadores()
        print("1. Volver atras")
        n2 = int(input("Escriba '1' para volver atras: "))
        if   n2 == 1:
            menuEstadisticas()
        while n2 != 1:
            n2 = int(input("Acci√≥n inv√°lida. Intente nuevamente: "))
            if n2 == 1:
                menuEstadisticas()
    elif n == 2:
        top5.asistidores()
        print("1. Volver atras")
        n2 = int(input("Escriba '1' para volver atras: "))
        if   n2 == 1:
            menuEstadisticas()
        while n2 != 1:
            n2 = int(input("Acci√≥n inv√°lida. Intente nuevamente: "))
            if n2 == 1:
                menuEstadisticas()        
    elif n == 3:
        top5.activos()
        print("1. Volver atras")
        n2 = int(input("Escriba '1' para volver atras: "))
        if   n2 == 1:
            menuEstadisticas()
        while n2 != 1:
            n2 = int(input("Acci√≥n inv√°lida. Intente nuevamente: "))   
            if n2 == 1:
                menuEstadisticas()         
    elif n == 4:
        top5.ganadores()
        print("1. Volver atras")
        n2 = int(input("Escriba '1' para volver atras: "))
        if   n2 == 1:
            menuEstadisticas()
        while n2 != 1:
            n2 = int(input("Acci√≥n inv√°lida. Intente nuevamente: "))
            if n2 == 1:
                menuEstadisticas()            
    elif n == 5:
        top5.perdedores()
        print("1. Volver atras")
        n2 = int(input("Escriba '1' para volver atras: "))
        if   n2 == 1:
            menuEstadisticas()
        while n2 != 1:
            n2 = int(input("Acci√≥n inv√°lida. Intente nuevamente: "))
            if n2 == 1:
                menuEstadisticas()            
    elif n == 6:
        exportarStats()
        print("El archivo 'estadisticas.csv' ya est√° ubicado en la carpeta 'export'")
        menuEstadisticas()
    elif n == 7:
        main()
    

main()
